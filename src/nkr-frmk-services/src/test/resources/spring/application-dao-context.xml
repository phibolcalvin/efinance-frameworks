<beans  
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	 <!--                                                                      -->
	 <!-- Configuration for encryptor, based on environment variables.         -->
	 <!--                                                                      -->
	 <!-- In this example, the encryption password will be read from an        -->
	 <!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once    --> 
	 <!-- the application has been started, could be safely unset.             -->
	 <!--                                                                      -->
	 

	 <bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
	   <property name="algorithm" value="PBEWithMD5AndTripleDES" />
	   <property name="passwordEnvName" value="APP_ENCRYPTION_PASSWORD" />
	 </bean>
 
	  
	 <!--                                                                      -->
	 <!-- The will be the encryptor used for decrypting configuration values.  -->
	 <!--                                                                      -->
	 <!--  
	 <bean id="configurationEncryptorForDatasource" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
	   <property name="config" ref="environmentVariablesConfiguration" />
	 </bean>
	 -->
						

	<bean id="strongEncryptorForDatasource" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="algorithm"><value>PBEWithMD5AndDES</value></property>
		<property name="password"><value>@$#nKr-DbmYSqL#$@</value></property>
	</bean>
   


	<bean id="pooledPBEStringEncryptor" class="org.jasypt.encryption.pbe.PooledPBEStringEncryptor">
		<property name="algorithm"><value>PBEWithMD5AndDES</value></property>
		<property name="password"><value>@$#nKr-DbHiBnt#$@</value></property>
		<property name="poolSize"><value>4</value></property>
	</bean>
  
	<bean id="hibernateStringEncryptor" class="org.jasypt.hibernate4.encryptor.HibernatePBEStringEncryptor">
		<property name="registeredName"><value>hibernateStringEncryptor</value></property>
		<property name="encryptor"><ref bean="pooledPBEStringEncryptor" /></property>
	</bean>


   <!-- Datasource -->
	
	 <!--                                                                      -->
	 <!-- The EncryptablePropertyPlaceholderConfigurer will read the           -->
	 <!-- .properties files and make their values accessible as ${var}         -->
	 <!--                                                                      -->
	 <!-- Our "configurationEncryptor" bean (which implements org.jasypt.encryption.StringEncryptor) is set as a constructor arg.  -->
	 <!--  - strongEncryptorDatatasource                                                                    -->
	 <!--  - configurationEncryptor                                                                    -->
	 <!-- 
	 <bean id="propertyConfigurer" class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer">
	   <constructor-arg ref="strongEncryptorForDatasource" />
	   <property name="locations">
	     <list>
	       <value>classpath:database.properties</value>
	     </list>
	   </property>
	   
	 </bean>
	-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
     		<list>
          		<value>classpath:database.properties</value>
     		</list>
   		</property>
	</bean>
	 
	<!-- not encrypted database.properties
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
     		<list>
          		<value>classpath:database.properties</value>
     		</list>
   		</property>
	</bean>-->
	
 <!-- Datasources -->
	<!-- Postgresql Datasource
	<bean id="mainDataSource" class="org.postgresql.jdbc2.optional.PoolingDataSource">
		<property name="serverName" value="${db.serverName}" />
		<property name="portNumber" value="${db.portNumber}" />
   		<property name="databaseName" value="${db.database}" />
   		<property name="initialConnections" value="${db.initConnection}" />
   		<property name="maxConnections" value="${db.maxConnection}" />
   		<property name="user" value="${db.userName}" />
   		<property name="password" value="${db.Password}" />
   </bean>
   -->

   <!-- MySQL Datasource -->
   <!--
    <bean id="mainDataSource" class="com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource">
        <property name="serverName" value="${db.serverName}" />
		<property name="port" value="${db.portNumber}" />
		<property name="user" value="${db.userName}" />
		<property name="password" value="${db.password}" />
		<property name="databaseName" value="${db.database}" />
    </bean>
	-->
	
   <!-- Common Basic Datasource -->
    <bean id="mainDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="username" value="${db.userName}" />
		<property name="password" value="${db.password}" />
		<!--
		<property name="url" value="jdbc:mysql://${db.serverName}:${db.portNumber}/${db.database}"/>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:log4jdbc:mysql://${db.serverName}:${db.portNumber}/${db.database}"/>
		<property name="driverClassName" value="net.sf.log4jdbc.DriverSpy"/>
		-->
		<property name="url" value="jdbc:postgresql://${db.serverName}:${db.portNumber}/${db.database}"/>
		<property name="driverClassName" value="org.postgresql.Driver"/>
    </bean>	
   
   <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="mainDataSource"/>
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/>
		<property name="entityInterceptor" ref="interceptorChain" />
	</bean>
	
	<bean id="interceptorChain" class="com.nokor.frmk.interceptor.audit.InterceptorChain">
		<property name="interceptors">
			<list>
				<bean class="com.nokor.frmk.interceptor.audit.CreateUserAuditableInterceptor" />
				<bean class="com.nokor.frmk.interceptor.audit.CreateDateAuditableInterceptor" />
				<bean class="com.nokor.frmk.interceptor.audit.UpdateUserAuditableInterceptor" />
				<bean class="com.nokor.frmk.interceptor.audit.UpdateDateAuditableInterceptor" />
			</list>
		</property>
	</bean>

		
	<tx:annotation-driven transaction-manager="transactionManager" />
		
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="mainDataSource" />
	</bean>

	<!-- 
		ISOLATION_DEFAULT Use the default isolation level of the underlying datastore.
		ISOLATION_READ_COMMITTED  A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur.
		ISOLATION_READ_UNCOMMITTED  A constant indicating that dirty reads, non-repeatable reads and phantom reads can occur.
		ISOLATION_REPEATABLE_READ  A constant indicating that dirty reads and non-repeatable reads are prevented; phantom reads can occur.
		ISOLATION_SERIALIZABLE A constant indicating that dirty reads, non-repeatable reads and phantom reads are prevented.
		PROPAGATION_MANDATORY Support a current transaction, throw an exception if none exists.
		PROPAGATION_NESTED  Execute within a nested transaction if a current transaction exists, behave like PROPAGATION_REQUIRED else.
		PROPAGATION_NEVER  Execute non-transactionally, throw an exception if a transaction exists.
		PROPAGATION_NOT_SUPPORTED  Execute non-transactionally, suspend the current transaction if one exists.
		PROPAGATION_REQUIRED  Support a current transaction, create a new one if none exists.
		PROPAGATION_REQUIRES_NEW  Create a new transaction, suspend the current transaction if one exists.
		PROPAGATION_SUPPORTS  Support a current transaction, execute non-transactionally if none exists.
		  -->
	<bean id="transactedServiceTemplate" abstract="true" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
			
				<!--<prop key="*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,-java.lang.Exception</prop>-->
		
				<prop key="*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED,-java.lang.Exception</prop>
				<prop key="find*">PROPAGATION_REQUIRED, ISOLATION_REPEATABLE_READ,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED, ISOLATION_REPEATABLE_READ,readOnly</prop>
				<prop key="list*">PROPAGATION_REQUIRED, ISOLATION_REPEATABLE_READ,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED, ISOLATION_REPEATABLE_READ,readOnly</prop>
				<prop key="add*">PROPAGATION_REQUIRED, ISOLATION_READ_COMMITTED</prop>
				<prop key="create*">PROPAGATION_REQUIRED, ISOLATION_READ_COMMITTED</prop>
				<prop key="save*">PROPAGATION_REQUIRED, ISOLATION_READ_COMMITTED</prop>
				<prop key="update*">PROPAGATION_REQUIRED, ISOLATION_READ_COMMITTED</prop>
				<prop key="change*">PROPAGATION_REQUIRED, ISOLATION_READ_COMMITTED</prop>
				<prop key="set*">PROPAGATION_REQUIRED, ISOLATION_READ_COMMITTED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED, ISOLATION_READ_UNCOMMITTED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED, ISOLATION_READ_UNCOMMITTED</prop>
			
			</props>
		</property>
		<property name="preInterceptors">
			<list>
				<ref bean="sessionFactoryInterceptor" />
			</list>
		</property>
	</bean>						
		
	<!-- The transaction advice - setting attributes for transactions -->
	<!--
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" isolation="READ_COMMITTED" />
			<tx:method name="load*" read-only="true" isolation="READ_COMMITTED" />
			<tx:method name="list*" read-only="true" isolation="READ_COMMITTED" />
			<tx:method name="get*" read-only="true" isolation="READ_COMMITTED" />
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="create*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="change*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="set*" propagation="REQUIRED" isolation="READ_COMMITTED" />
			<tx:method name="remove*" propagation="REQUIRED" isolation="READ_UNCOMMITTED" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="READ_UNCOMMITTED" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	-->

	<!-- Establish the AOP transaction cross cutting concern and define which classes/methods are transactional  -->
	<!--
	<aop:config>
		<aop:pointcut id="seuksaFrmkServices" expression="execution(* org.seuksa.frmk..*service*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="seuksaFrmkServices" />
		<aop:pointcut id="nokorFrmkServices" expression="execution(* com.nokor.frmk..*service*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="nokorFrmkServices" />
		<aop:pointcut id="ersysServices" expression="execution(* com.nokor.ersys..*service*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="ersysServices" />
	</aop:config>
	-->

		
	<!-- ne fonctionne pas avec Hibernate4 
	   org.springframework.orm.hibernate3.HibernateInterceptor
		workaround: EntityInterceptor 
		http://stackoverflow.com/questions/3055761/how-to-enable-hibernate-interceptor-when-i-have-my-hibernate-transaction-managed
	<bean id="daoTemplate" abstract="true">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<bean id="sessionFactoryInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor" parent="daoTemplate"/>
	-->

</beans>